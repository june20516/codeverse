1:HL["/_next/static/css/9674fbd74573baf2.css",{"as":"style"}]
0:[[["",{"children":["posts",{"children":["__PAGE__",{}]}]},"$undefined","$undefined",true],"$L2",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/9674fbd74573baf2.css","precedence":"next"}]],["$L3",null]]]]
4:I{"id":"1616","chunks":["771:static/chunks/771-a273996dc83f4cad.js","274:static/chunks/274-31a5843dc341abd2.js","964:static/chunks/964-3fbb84800944960d.js","925:static/chunks/925-98b9640d621f887a.js","222:static/chunks/222-8be30348cbe4dffe.js","185:static/chunks/app/layout-6cdfa5accf696248.js"],"name":"","async":false}
5:I{"id":"4463","chunks":["272:static/chunks/webpack-6c88f117227a55df.js","667:static/chunks/2443530c-b37977cb0d35fe50.js","488:static/chunks/488-754b8491efac4835.js"],"name":"","async":false}
6:I{"id":"1010","chunks":["272:static/chunks/webpack-6c88f117227a55df.js","667:static/chunks/2443530c-b37977cb0d35fe50.js","488:static/chunks/488-754b8491efac4835.js"],"name":"","async":false}
7:I{"id":"6640","chunks":["771:static/chunks/771-a273996dc83f4cad.js","274:static/chunks/274-31a5843dc341abd2.js","640:static/chunks/640-89e60937cc8073ce.js","605:static/chunks/app/tags/[tag]/page-da036b129eb98df8.js"],"name":"","async":false}
2:[["$","$L4",null,{"children":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":[["$","ol",null,{"children":[["$","$L7","0",{"post":{"slug":"mysql-dockerize-2","meta":{"title":"mysql dockerize(2) - mysql container에 볼륨 설정하기","date":"2021/11/13","description":"내 로컬 환경은 소중하니까","thumbnail":"assets/images/posts/mysql-dockerize.jpeg","tags":["container","docker","mysql","volume","도커","볼륨"]},"content":"\n## 계속 쓸 수 있는 DB 만들기\n\n일반적으로 도커 컨테이너는 프로세스가 종료되면 내부에서 일어났던 변경사항들은 날아갑니다. 재부팅이라도 하는 날에는 그 동안 컨테이너에서 생성했던 데이터들은 없던 일이 되죠. 물론 도커는 볼륨이라는 개념으로 데이터를 유지할 수 있는 기능을 제공합니다.\nmysql 이미지는 이 기능을 내부적으로 사용하고 있어서, 컨테이너를 생성할 때 볼륨을 자동 생성합니다. 그래서 컨테이너를 실행하고 정지하는 것을 반복해도 데이터가 유지됩니다. 하지만 이 렇게 만들어진 볼륨은 컨테이너가 아예 삭제되어 버리는 경우 그 데이터를 보존할 수가 없습니다.\n저는 몇 번 재설치를 하더라도 데이터는 별도로 관리할 수 있었으면 좋겠어요.\n\n### 볼륨\n\n공식 문서에는 이렇게 쓰여있습니다.\n\n> Volumes are the preferred mechanism for persisting data generated by and used by Docker containers.\n> While bind mounts are dependent on the directory structure and OS of the host machine, volumes are completely managed by Docker.\n\n데이터를 유지하기 위한 기본 메커니즘이라고 합니다. `Bind mount`라는 운영 체제의 파일 시스템을 컨테이너에 마운트 해 쓰는 기능이 있는데, 볼륨은 그 보다 더 폭넓은 기능을 제공하고, 관리를 도커 내에서 하기 때문에 도커를 실행하는 운영체제에 영향을 받지 않는다는 장점이 있습니다.\n\n### 볼륨 확인\n\n먼저 기본으로 생성되는 볼륨을 확인해 보겠습니다.\n\n```shell\n$ docker run --name mysql -e MYSQL_ROOT_PASSWORD=1234 -d mysql\ne94b0ab7eed5b1d147147ffe5b170d1520ee680f7b3ab7511e4e0fb4fb9a1925\n\n$  docker volume list\nDRIVER    VOLUME NAME\nlocal     b97c5432ff0a86802d2cbca69484448f1ecd5c530ddcad7e4b7eea3c6ec2e8c5\n```\n\n`docker volume list`로 볼륨의 리스트를 확인하면 임의의 해시로 설정된 볼륨이 생성된 것을 확인할 수 있습니다.\n그럼 컨테이너를 삭제하고 다시 실행해 보겠습니다.\n\n```shell\n$ docker stop mysql\nmysql\n\n$ docker rm mysql\nmysql\n\n$ docker run --name mysql -e MYSQL_ROOT_PASSWORD=1234 -d mysql\n456be35825bc8b1b7d2a4494c8b160ab578730f31a625a775abea271b036eae7\n\n$ docker volume list\nDRIVER    VOLUME NAME\nlocal     6765f342d98d3f274a0d7c3b137e07e48e9c153764e372707b6d987018498e6d\nlocal     b97c5432ff0a86802d2cbca69484448f1ecd5c530ddcad7e4b7eea3c6ec2e8c5\n```\n\n아까 생성됐던 볼륨은 지워지지 않고 새로운 볼륨이 생성된 것을 확인할 수 있습니다. 지금은 볼륨 리스트로만 확인해봤지만 직접 컨테이너 안에 들어가서 데이터를 생성해보며 테스트를 해봐도 컨테이너를 삭제 후 생성하면 기존의 데이터가 없음을 확인할 수 있습니다.\n\n### 볼륨에 이름 부여하기\n\n컨테이너를 실행할 때 `-v {볼륨 이름||로컬 경로}:{컨테이너 안 경로}`또는 `--volume={볼륨 이름||로컬 경로}:{컨테이너 안 경로}` 옵션을 부여하여 볼륨을 직접 설정할 수 있습니다. mysql 이미지 안에서 볼륨은 `/var/lib/mysql`에 마운트 되어야 하기 때문에, 해당 경로와 임의의 이름으로 옵션을 부여합니다. 아래에서는 이름을 `mysql-volume`으로 설정했습니다.\n\n```shell\n$ docker run --name mysql -e MYSQL_ROOT_PASSWORD=1234 -v mysql-volume:/var/lib/mysql -d mysql\n```\n\n`myslq-volume`이라는 이름의 볼륨을 `mysql`이라는 이름의 컨테이너에 쓰기로 했으니, 이제 다시 볼륨 목록을 확인해 보겠습니다.\n\n```shell\n$ docker volume list\nDRIVER    VOLUME NAME\nlocal     6765f342d98d3f274a0d7c3b137e07e48e9c153764e372707b6d987018498e6d\nlocal     b97c5432ff0a86802d2cbca69484448f1ecd5c530ddcad7e4b7eea3c6ec2e8c5\nlocal     mysql-volume\n```\n\n볼륨이 생성되었습니다. 이제 이름이 존재하는 볼륨을 사용하니까, 컨테이너를 계속 삭제해도 볼륨을 직접 제거하지 않는 한 볼륨 옵션을 명시하여 동일한 볼륨을 계속 쓸 수 있습니다.\n\n### 볼륨 삭제하기\n\n불필요한 볼륨들은 삭제합시다.\n\n1. 컨테이너를 삭제할 때 같이 삭제하는 방법으로, 컨테이너 삭제 명령에 `-v`옵션을 줄 수 있습니다.\n\n```shell\n$ docker rm -v mysql\n```\n\n2. 위에서 했던 것과 같이 볼륨 리스트를 보고 직접 해시네임을 선택해 삭제할 수도 있습니다.\n\n```shell\n$ docker volume rm 6765f342d98d3f274a0d7c3b137e07e48e9c153764e372707b6d987018498e6d\n```\n\n3. 로컬에 생성되어있고 컨테이너에 연결되지 않은(==dangling상태의) 모든 볼륨을 다 삭제하는 명령어도 있습니다.\n\n```shell\n$ docker volume prune\n```\n\n---\n\n시리즈의 다음 글에서는, 로컬에서 사용하던 데이터 베이스를 그대로 사용하기 위해서 dump파일을 database에 밀어넣는 방법을 알아보겠습니다.\n"}}],["$","$L7","1",{"post":{"slug":"mysql-dockerize","meta":{"title":"mysql dockerize(1) - 도커로 mysql container 띄우기","date":"2021/11/07","description":"내 로컬 환경은 소중하니까","tags":["MYSQL_ALLOW_EMPTY_PASSWORD","MYSQL_RANDOM_ROOT_PASSWORD","MYSQL_ROOT_PASSWORD","container","docker","mysql"],"thumbnail":"assets/images/posts/mysql-dockerize.jpeg"},"content":"\n최근 작업 중 DB에 스키마 변경을 가하면 DB랑 로컬 개발 환경이 함께 쭉 드러누워버리는 일이 자주 발생합니다. 로컬에서 돌리고 있던 mysql을 격리시켜버리기로 결심했습니다.\n\n## 시작점\n\n저는 DB로 mysql을 쓰고있고, ROR로 프로젝트를 진행하고 있습니다. 로컬 환경에 mysql server를 설치해 쓰고있었고, Docker는 이미 깔려있습니다.\n\n## 도커로 mysql container 띄우기\n\n### mysql 이미지 가져오기\n\n먼저 mysql 이미지를 가져옵니다.\n\n```shell\n$ docker pull mysql\n\nUsing default tag: latest\nlatest: Pulling from library/mysql\n...\n...\nDigest: ...\nStatus: Downloaded newer image for mysql:latest\ndocker.io/library/mysql:latest\n```\n\nlts버젼의 mysql 이미지가 로드됩니다.\n\n### mysql 이미지를 컨테이너로 실행하기\n\n로드한 이미지를 컨테이너로 실행해봅니다.\n\n```shell\n$ docker run mysql\n\n2021-11-07 07:55:25+00:00 [Note] [Entrypoint]: Entrypoint script for MySQL Server 8.0.27-1debian10 started.\n2021-11-07 07:55:25+00:00 [Note] [Entrypoint]: Switching to dedicated user 'mysql'\n2021-11-07 07:55:25+00:00 [Note] [Entrypoint]: Entrypoint script for MySQL Server 8.0.27-1debian10 started.\n2021-11-07 07:55:25+00:00 [ERROR] [Entrypoint]: Database is uninitialized and password option is not specified\n    You need to specify one of the following:\n    - MYSQL_ROOT_PASSWORD\n    - MYSQL_ALLOW_EMPTY_PASSWORD\n    - MYSQL_RANDOM_ROOT_PASSWORD\n```\n\n에러가 뜹니다. mysql 컨테이너는 root 유저의 password를 어떻게 할 것인지에 대해 옵션을 명시해야 한다고 합니다. 아래 3개의 항목 중 하나를 선택해 컨테이너 안에 환경변수로 넘겨 줍니다.\n\n```shell\n$ docker run mysql -e MYSQL_ROOT_PASSWORD=1234\n# 또는\n$ docker run mysql -e MYSQL_ALLOW_EMPTY_PASSWORD=abcd\n# 또는\n$ docker run mysql -e MYSQL_RANDOM_ROOT_PASSWORD=abcd\n```\n\n저는 root password를 지정해주었습니다. password를 설정하지 않는 `MYSQL_ALLOW_EMPTY_PASSWORD` 옵션이나 `MYSQL_RANDOM_ROOT_PASSWORD` 옵션도 환경변수 안에 어떤 값이든 담아주어야 동작합니다. 실제로 해당 값이 영향을 끼치지는 않습니다.\n\nrandom 옵션은 아래와 같이 실행 로그에서 비밀번호를 알려줍니다.\n\n```shell\n2021-11-07 07:55:40+00:00 [Note] [Entrypoint]: Entrypoint script for MySQL Server 8.0.27-1debian10 started.\n2021-11-07 07:55:40+00:00 [Note] [Entrypoint]: Switching to dedicated user 'mysql'\n...\n...\n2021-11-07 07:55:48+00:00 [Note] [Entrypoint]: GENERATED ROOT PASSWORD: ojai1toovee3jahC4ooh7on8ahjoo0ji\n...\n2021-11-07 07:55:50+00:00 [Note] [Entrypoint]: MySQL init process done. Ready for start up.\n...\n2021-11-07T07:55:51.690474Z 0 [System] [MY-011323] [Server] X Plugin ready for connections. Bind-address: '::' port: 33060, socket: /var/run/mysqld/mysqlx.sock\n2021-11-07T07:55:51.690582Z 0 [System] [MY-010931] [Server] /usr/sbin/mysqld: ready for connections. Version: '8.0.27'  socket: '/var/run/mysqld/mysqld.sock'  port: 3306  MySQL Community Server - GPL.\n```\n\n컨테이너가 잘 떴는지 확인해봅니다.\n\n```shell\n$ docker ps\n\nCONTAINER ID   IMAGE      COMMAND                  CREATED         STATUS          PORTS                    NAMES\nddb780457980   mysql      \"docker-entrypoint.s…\"   4 minutes ago   Up 4 minutes    3306/tcp, 33060/tcp      musing_dewdney\n```\n\n### 컨테이너 실행 결과 확인하기\n\n터미널 창을 하나 더 켜고, 아래 명령어로 방금 띄운 mysql 컨테이너에 접속해 볼 수 있습니다. 지정한 비밀번호로 mysql 클라이언트도 잘 접속이 됩니다.\n\n```shell\n$ docker exec -it musing_dewdney bash\n\nroot@ddb780457980:/# mysql -uroot -p1234\n\nmysql: [Warning] Using a password on the command line interface can be insecure.\nWelcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 9\nServer version: 8.0.27 MySQL Community Server - GPL\n\nCopyright (c) 2000, 2021, Oracle and/or its affiliates.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nmysql>\n```\n\n### 옵션 추가\n\nmysql 서버는 항상 돌아가고 있어야 하므로 데몬 환경으로 실행하는 것이 일반적입니다. 그리고 편하게 접근하기 위해서 임의로 컨테이너에 네임도 붙이고 싶습니다.\n띄워놓은 컨테이너를 정지, 삭제 하고 몇가지 옵션을 추가해 새로 띄워봅니다.\n\n```shell\n$ docker kill musing_dewdney\n\n$ docker rm musing_dewdney\n\n$ docker run --name mysql -e MYSQL_ROOT_PASSWORD=1234 -d mysql\n```\n\n성공하였다면 아까와 같이 컨테이너 안에 접속하여 확인할 수 있습니다.\n\n```\n$ docker exec -it mysql bash\n```\n"}}],["$","$L7","2",{"post":{"slug":"command-tsc-is-not-found","meta":{"title":"Command 'tsc' is not found","date":"2021/10/01","tags":["NestJS","Node","tsc","typescript"],"thumbnail":"assets/images/posts/command-tsc-is-not-found.png"},"content":"\nNode.js 환경에서 Nestjs 프레임 워크를 사용하기 위해 type script를 설정하다가 `Command 'tsc' is not found`라는 에러가 발생하는 경우가 있었습니다. 분명히 tsc는 몇번이고 설치를 하였는데 찾을 수가 없다고 하고, 라이브러리 리스트에서는 여전히 설치가 된 것으로 잡히고 있습니다. yarn과 npm 둘 다 시도해 봤지만 마찬가지였습니다.\n\n여러 레퍼런스를 찾아보다가 해결책을 찾아 기록으로 남깁니다.\n\n```shell\nexport PATH=\"$PATH:/Users/narb/.npm-global/lib/node_modules/typescript/bin\"\n\nexport PATH=\"$PATH:/Users/narb/.npm-global/bin\"\n```\n\n문제는 역시나 command가 위치한 path를 찾을 수 없었던 것이었습니다. npm 설치 초기에 path를 별도로 설정해야 하는지는 모르겠지만, 제 로컬 환경에서는 설정이 되어있지 않았던 것이 문제였습니다.\n\n위의 PATH 추가 구문을 terminal에서 사용하는 설정파일인 rc파일이나 profile파일 안에 끼워넣으면 됩니다.\n(아래 줄의 코드를 먼저 시도해 보고 안되면 윗줄도 추가하면 좋을 것 같습니다. )\n저의 경우 zsh를 쓰기 때문에 `~/.zshrc` 에 넣었습니다. 아직 bash를 쓰고있다면 `~/.bash_profile`에 넣으면 됩니다.\n이후 터미널을 재시작 하거나 `source ~/.zshrc` 하고 나서부터 `tsc` 명령어를 사용할 수 있습니다.\n다\n"}}],["$","$L7","3",{"post":{"slug":"rds-dump","meta":{"title":"AWS RDS의 Data base를 dump하기","description":"VPC 안에 있는 RDS에서 Data base를 dump해 와서 local의 mysql에 밀어 넣는 과정에서 단편적으로 맞닥뜨렸던 문제를 기록합니다.","date":"2021/09/14","tags":["COLUMN_STATISTICS","NO_AUTO_CREATE_USER","column-statistics=0","mysqldump","sed","sql_mode","ssh tunneling"],"thumbnail":"assets/images/posts/rds-dump.png"},"content":"\n## ssh tunneling을 통해 DB dump해오기\n\n- `mysqldump` 명령어를 통해 `.sql`파일의 형태로 db를 덤프해 올 수 있습니다.\n- tunneling을 수행할 ec2 인스턴스가 mysql client를 가지고 있어야 합니다.\n\n```shell\n$ ssh `tunneling-instanse-username`@`tunneling-instanse-host` -i `key-file-path` mysqldump -u`username` -p`password` -h `remote-db-host` `database-name` > `local/path/to/save.sql`\n```\n\n### COLUMN_STATISTICS\n\n#### 덤프 시도 중 `...: Unknown table 'COLUMN_STATISTICS' in information_schema` 라는 에러가 발생할 경우\n\n- 8.0부터 새로 추가된 옵션으로, 덤프 할 때 ANALYZE TABLE에 통계 데이터를 입력 또는 수정하는 옵션이라고 합니다.<sup>[레퍼런스](https://jay-ji.tistory.com/62)</sup>\n- 명시적으로 해당 옵션을 사용하지 않는다고 알려줍시다. dump 명령에 `--column-statistics=0` 옵션을 추가합니다.\n\n```shell\n$ ssh `tunneling-instanse-username`@`tunneling-instanse-host` -i `key-file-path` mysqldump -u`username` -p`password` -h `remote-db-host` --column-statistics=0 `database-name` > `local/path/to/save.sql`\n```\n\n#### 덤프 시도 중 `...unknown variable 'column-statistics=0'...` 라는 에러가 발생할 경우\n\n- 위의 문제에 해당하지 않는 데 옵션을 주는 경우로, dump 명령 옵션에서 `--column-statistics=0`을 제거합니다.\n\n## .sql파일을 로컬 mysql에 로드하기\n\n- `mysql`명령어를 통해 `database-name`이라는 data base 에 `dumped.sql` 파일의 내용을 로드할 수 있습니다.\n- 데이터를 받을 database는 미리 생성되어있고 비어있어야 합니다.\n\n```shell\n$ mysql -u`local-user-name` -p`local-pwd` `database-name` < `path/for/dumped.sql`\n```\n\n### NO_AUTO_CREATE_USER\n\n#### 로드 시도 중 `Variable 'sql_mode' can't be set to the value of 'NO_AUTO_CREATE_USER'` 라는 에러가 발생할 경우\n\n- USER 생성과 관련있는 모드입니다. mysql 8.0 이상부터 해당 모드가 제거되고 별도 구문으로(`CREAT USER...` 또는 `GRANT...` ) 처리됩니다.\n- 해결을 위해 `dumped.sql` 의 내용을 약간 수정해줍니다.\n- `.sql`파일은 데이터 베이스를 구성하는 sql문이 잔뜩 적혀있어 용량이 매우 큰 경우가 대부분입니다. 따라서 editor으로 열어서 수정하는 것은 좋지 않은 선택입니다. `sed` 명령어를 사용해 수정합니다.\n- `sed`명령어는 레퍼런스가 많지만, Unix 계열인 mac의 터미널에서는 용법이 조금 다릅니다.\n\n```shell\nsed -i '' 's/NO_AUTO_CREATE_USER//' `path/for/dumped.sql`\n```\n\n- 위와 같이 입력하여 sql파일을 수정하고 다시 로드합니다.\n"}}],["$","$L7","4",{"post":{"slug":"trap-of-htmlcollection","meta":{"title":"HTMLCollection의 함정","description":"최근 작업에서 클래스를 기준으로 스크립트를 작성할 일이 있었습니다. 그런데, 이 작업 도중 선뜻 이해가 가지 않는 일이 생겨 삽질을 했습니다. 그 삽질의 기억을 기록합니다.","date":"2021/09/07","tags":["HTMLCollection","getElementsByClassName","nodeList","querySelectorAll()"],"categories":["dev","web"],"thumbnail":"assets/images/posts/trap-of-htmlcollection.jpeg"},"content":"\n```html\n<div class=\"wrapper lunchtime-template\">\n  <p class=\"title\">\n    <span class=\"text-primary name-slot\">OOO</span>\n    의 점심시간\n  </p>\n  <ul>\n    <li class=\"text-info history-slot\"></li>\n    <li class=\"text-info history-slot\"></li>\n    <li class=\"text-info history-slot\"></li>\n    <li class=\"text-info history-slot\"></li>\n  </ul>\n</div>\n```\n\n위와 같은 형태의 html이 있고, 이 template를 복사해 와서 데이터를 알맞게 넣는 식의 작업이었습니다.\n스크립트를 짜기 시작합니다..\n\n```javascript\nconst data = {\n  bran: ['철판 볶음밥을 먹었다', '커피를 주문했다', '쿠키도 구매했다', '양치를 했다'],\n};\nlet lunchTimeDiv = document.querySelector('.lunchtime-template').cloneNode(true);\n```\n\n상세 전략으로, 알맞는 tag element를 찾아 알맞는 데이터를 넣어준 이후, template로 활용하고자 설정해 두었던 class name들을 다 제거하려 생각했습니다.\n\n```javascript\nlunchTimeDiv.classList.remove('lunchtime-template');\n\nlet name = Object.keys(data)[0];\nlet nameSlot = lunchTimeDiv.querySelector('.name-slot');\nnameSlot.innerHTML = name;\nnameSlot.classList.remove('name-slot');\n```\n\n여기까지는 무탈하게 진행하였으나, 문제는 이후에 발생했습니다.\n\n```javascript\nconst histories = data[name];\nlet historySlots = lunchTimeDiv.getElementsByClassName('history-slot');\nfor (let idx = 0; idx < historySlots.length; idx++) {\n  slot = historySlots[idx];\n  slot.innerText = histories[idx];\n  slot.classList.remove('history-slot');\n}\n```\n\n스크립트로 뿌려진 데이터는 기대와 달랐습니다.\n\n```html\n<div class=\"wrapper\">\n  <p class=\"title\">\n    <span class=\"text-primary\">bran</span>\n    의 점심시간\n  </p>\n  <ul>\n    <li class=\"text-info\">철판 볶음밥을 먹었다</li>\n    <li class=\"text-info history-slot\"></li>\n    <li class=\"text-info\">커피를 주문했다</li>\n    <li class=\"text-info history-slot\"></li>\n  </ul>\n</div>\n```\n\n> 이.. 이게 대체 어떻게 된 일이지..\n\n기대와 전혀 다른 모습에 얼떨떨합니다. 아무리 생각처럼 한번에 안되는 것이 코딩이라지만, 이렇게 단순한 코드에서 삽질이라니??\n영문을 모르고 어리둥절 해서 빤히 보고있는데, 패턴이 뭔가 익숙합니다. 고사리손으로 level1 알고리즘 문제를 풀어나가던 시절이 떠올랐습니다. 루프 안에서 인덱스를 조절해야 했던 문제가 있었던 것 같아요. 혹시나 싶어 서둘러 코드에 한줄을 끼워 넣어봅니다..\n\n```javascript\nfor (let idx = 0; idx < histories.length; idx++) {\n  slot = historySlots[idx];\n  slot.innerText = histories[idx];\n  slot.classList.remove('history-slot');\n  idx -= 1;\n}\n```\n\n결과가 나오긴 나왔습니다. 뭔가 이상하지만요.\n\n```html\n<div class=\"wrapper\">\n  <p class=\"title\">\n    <span class=\"text-primary\">bran</span>\n    의 점심시간\n  </p>\n  <ul>\n    <li class=\"text-info\">철판 볶음밥을 먹었다</li>\n    <li class=\"text-info\">철판 볶음밥을 먹었다</li>\n    <li class=\"text-info\">철판 볶음밥을 먹었다</li>\n    <li class=\"text-info\">철판 볶음밥을 먹었다</li>\n  </ul>\n</div>\n```\n\n반쪽이나마, 포문에서 발생하는 걸로 추정되는 문제는 해결이 되었습니다. 하지만 데이터도 같은 인덱스로 돌아야 하기 때문에 이렇게는 복잡성만 키울 뿐, 이 방향으로는 해결이 어려울 것 같습니다.\n\n보다 근본적인 문제를 고민해보니, 아무래도 루프가 진행됨에 따라 `historySlots`이 제 예상과는 다르게 변하고 있는 것 같습니다. 그래서 `historySlots`을 잡는 방법을 `getElementsByClassName`에서 `querySelectorAll`으로 바꿔보았습니다.\n\n```html\n<div class=\"wrapper lunchtime-template\">\n  <p class=\"title\">\n    <span class=\"text-primary name-slot\">OOO</span>\n    의 점심시간\n  </p>\n  <ul>\n    <li class=\"text-info history-slot\"></li>\n    <li class=\"text-info history-slot\"></li>\n    <li class=\"text-info history-slot\"></li>\n    <li class=\"text-info history-slot\"></li>\n  </ul>\n</div>\n\n<script>\n  const data = {\n    bran: ['철판 볶음밥을 먹었다', '커피를 주문했다', '쿠키도 구매했다', '양치를 했다'],\n  };\n  let lunchTimeDiv = document.querySelector('.lunchtime-template').cloneNode(true);\n  lunchTimeDiv.classList.remove('lunchtime-template');\n\n  let name = Object.keys(data)[0];\n  let nameSlot = lunchTimeDiv.querySelector('.name-slot');\n  nameSlot.innerHTML = name;\n  nameSlot.classList.remove('name-slot');\n  const histories = data[name];\n\n  // 이곳을\n  let historySlots = lunchTimeDiv.querySelectorAll('.history-slot');\n  // 바꿨습니다.\n\n  for (let idx = 0; idx < historySlots.length; idx++) {\n    slot = historySlots[idx];\n    slot.innerText = histories[idx];\n    slot.classList.remove('history-slot');\n  }\n</script>\n```\n\n드디어 의도대로 동작하는 것을 확인할 수 있었습니다.\n\n```html\n<div class=\"wrapper\">\n  <p class=\"title\">\n    <span class=\"text-primary\">bran</span>\n    의 점심시간\n  </p>\n  <ul>\n    <li class=\"text-info\">철판 볶음밥을 먹었다</li>\n    <li class=\"text-info\">커피를 주문했다</li>\n    <li class=\"text-info\">쿠키도 구매했다</li>\n    <li class=\"text-info\">양치를 했다</li>\n  </ul>\n</div>\n```\n\n---\n\n`getElementsByClassName`은 `HTMLCollection`을 반환합니다.\n`querySelectorAll`은 `NodeList`를 반환합니다.\n\n```javascript\nlet historySlots1 = lunchTimeDiv.getElementsByClassName('history-slot');\nlet historySlots2 = lunchTimeDiv.querySelectorAll('.history-slot');\nconsole.log(historySlots1.toString()); // '[object HTMLCollection]'\nconsole.log(historySlots2.toString()); //  '[object NodeList]'\n```\n\n[HTMLCollection과 NodeList](https://dev.to/theoluyi/queryselector-vs-getelementsbyclassname-nodelist-vs-htmlcollection-30gg) 의 차이를 설명하는 글을 공유합니다.\n\n간단하게 얘기하면, HTMLCollection은 항상 현재의 상황을 반영합니다. collection의 기준이 class name이었고, 저는 그 요소들의 class name을 지웠으니 더이상 해당 collection에 해당이 되지 않아 collection이 작아진거죠. 포문이 오작동한 원인은 이 것 때문이었습니다.\n\n더 깊게 얘기하면, HTML은 배열이 아닌 유사 배열로, 배열(array)에서 제공하는 forEach등의 함수를 사용할 수 없다고 합니다. 하지만 조금 더 HTML친화적으로 객체의 속성에 접근하듯이 `.[속성명]`의 방식으로 접근할 수도 있다고 합니다. <sup>[ref](https://devsoyoung.github.io/posts/js-htmlcollection-nodelist)</sup>\n\n좀 더 공부해서, 앞으로는 상황에 맞게 적절한 선택을 하며 작업해야겠습니다.\n"}}]]}],null],"segment":"__PAGE__"},"styles":[]}],"segment":"posts"},"styles":[]}],"params":{}}],null]
3:[[["$","meta",null,{"charSet":"utf-8"}],null,null,null,null,null,null,null,null,null,null,["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1"}],null,null,null,null,null,null,null,null,null,null,[]],[null,null,null,null],null,null,[null,null,null,null,null],null,null,null,null,[null,[["$","link",null,{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"any"}]],[],null]]
